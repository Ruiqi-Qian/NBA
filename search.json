[
  {
    "objectID": "visualization/visual.html",
    "href": "visualization/visual.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import legend\n\n\n\n\n\nCode\n# Load PER and TS% dataset and display the first few rows\ndf_per_ts = pd.read_csv(\"../data/PER-TS%.csv\")\nprint(df_per_ts.head())\n\n# Boxplot: Player Efficiency Rating (PER) by Season\nplt.figure(figsize=(10, 6))\nsns.boxplot(y=df_per_ts['PER'], x=df_per_ts['Season'])\nplt.grid(True)\nplt.title(\"PER Distribution by Season\")\nplt.show()\n\n# Load seasonal player data from 2019 to 2022\ndf_19 = pd.read_csv(\"../data/merged_data_pos-2019.csv\")\ndf_20 = pd.read_csv(\"../data/merged_data_pos-2020.csv\")\ndf_21 = pd.read_csv(\"../data/merged_data_pos-2021.csv\")\ndf_22 = pd.read_csv(\"../data/merged_data_pos-2022.csv\")\n\n# Add season labels\ndf_19['season'] = \"2019-20\"\ndf_20['season'] = \"2020-21\"\ndf_21['season'] = \"2021-22\"\ndf_22['season'] = \"2022-23\"\n\n# Combine PTS and Season into a single dataframe for KDE plot\ndf_all_seasons = pd.concat([\n    df_19[['pts', 'season']],\n    df_20[['pts', 'season']],\n    df_21[['pts', 'season']],\n    df_22[['pts', 'season']]\n], ignore_index=True)\n\nprint(df_all_seasons)\n\n\n\n   Season         Player   PER    TS%\n0    2019   Bradley Beal  20.8  0.581\n1    2019   James Harden  30.6  0.616\n2    2019   Kemba Walker  21.7  0.558\n3    2019  Tobias Harris  17.2  0.592\n4    2019  Tobias Harris  18.2  0.605\n\n\n\n\n\n\n\n\n\n       pts   season\n0     14.4  2019-20\n1      9.5  2019-20\n2      6.3  2019-20\n3     11.9  2019-20\n4      4.3  2019-20\n...    ...      ...\n1826   5.6  2022-23\n1827  11.6  2022-23\n1828  24.8  2022-23\n1829   5.2  2022-23\n1830   5.7  2022-23\n\n[1831 rows x 2 columns]\n\n\n\n\nCode\n# KDE plot: Distribution of Points per Game across seasons\nplt.figure(figsize=(10, 6))\nsns.kdeplot(data=df_all_seasons, x='pts', hue='season', fill=True, common_norm=False, alpha=0.4)\nplt.xlabel(\"Average Points Per Game (PTS)\", fontsize=12)\nplt.ylabel(\"Density\", fontsize=12)\nplt.legend(title='Season')\nplt.grid(True)\nplt.title(\"Scoring Distribution by Season\")\nplt.show()\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2875802610.py:6: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n  plt.legend(title='Season')\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter + Regression plots for Salary vs Points (each season)\n\n# 2019-20\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_19, x='season.y', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2019-20: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2020-21\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_20, x='2020/21', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2020-21: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2021-22\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_21, x='2021/22', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2021-22: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2022-23\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_22, x='2022/23', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2022-23: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Correlation heatmaps for each season\n\n# 2022\nplt.figure(figsize=(10, 6))\ncorr_matrix_22 = df_22[[\"pts\", \"reb\", \"ast\", \"2022/23\"]].corr()\nsns.heatmap(corr_matrix_22, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2022-23 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2021\nplt.figure(figsize=(10, 6))\ncorr_matrix_21 = df_21[[\"pts\", \"reb\", \"ast\", \"2021/22\"]].corr()\nsns.heatmap(corr_matrix_21, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2021-22 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2020\nplt.figure(figsize=(10, 6))\ncorr_matrix_20 = df_20[[\"pts\", \"reb\", \"ast\", \"2020/21\"]].corr()\nsns.heatmap(corr_matrix_20, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2020-21 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2019\nplt.figure(figsize=(10, 6))\ncorr_matrix_19 = df_19[[\"pts\", \"reb\", \"ast\", \"season.y\"]].corr()\nsns.heatmap(corr_matrix_19, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2019-20 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Boxplots of performance metrics by player position for each season\n\n# 2019\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2019-20: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2019-20: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2019-20: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2020\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2020-21: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2020-21: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2020-21: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2021\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2021-22: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2021-22: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2021-22: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2022\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2022-23: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2022-23: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2022-23: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:6: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:9: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:12: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:20: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:23: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:26: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:34: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:37: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:40: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:48: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:51: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:54: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Bar plots: Average Salary by Position\n\n# 2019\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_19, x=\"Pos\", y=\"season.y\", palette=\"coolwarm\")\nplt.title(\"2019-20: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2020\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_20, x=\"Pos\", y=\"2020/21\", palette=\"coolwarm\")\nplt.title(\"2020-21: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2021\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_21, x=\"Pos\", y=\"2021/22\", palette=\"coolwarm\")\nplt.title(\"2021-22: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2022\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_22, x=\"Pos\", y=\"2022/23\", palette=\"coolwarm\")\nplt.title(\"2022-23: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_19, x=\"Pos\", y=\"season.y\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:14: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_20, x=\"Pos\", y=\"2020/21\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:23: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_21, x=\"Pos\", y=\"2021/22\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:32: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_22, x=\"Pos\", y=\"2022/23\", palette=\"coolwarm\")"
  },
  {
    "objectID": "data_cleaning/data_cleaning.html",
    "href": "data_cleaning/data_cleaning.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndf = pd.read_csv(\"../data/NBA Advanced Stats(2019 - 2024).csv\")\nprint(f\"Loaded NBA Advanced Stats with {df.shape[0]} rows.\")\n\nprint(\"First 5 rows of the NBA Advanced Stats dataset:\")\nprint(df.head())\n\nprint(\"\\nDataset Info\")\nprint(df.info())\n\nprint(\"\\nSummary Statictics\")\nprint(df.describe())\n\nprint(\"\\nMissing values in each column:\")\nprint(df.isnull().sum())\n\nprint(\"\\nColumn names:\")\nprint(df.columns)\n\n\nLoaded NBA Advanced Stats with 4296 rows.\nFirst 5 rows of the NBA Advanced Stats dataset:\n   Unnamed: 0  Season         Player   Age Team Pos     G    GS      MP   PER  \\\n0           0    2019   Bradley Beal  25.0  WAS  SG  82.0  82.0  3028.0  20.8   \n1           1    2019   James Harden  29.0  HOU  PG  78.0  78.0  2867.0  30.6   \n2           2    2019   Kemba Walker  28.0  CHO  PG  82.0  82.0  2863.0  21.7   \n3           3    2019  Tobias Harris  26.0  2TM  PF  82.0  82.0  2847.0  17.2   \n4           4    2019  Tobias Harris  26.0  LAC  PF  55.0  55.0  1903.0  18.2   \n\n   ...  USG%   OWS  DWS    WS  WS/48  OBPM  DBPM   BPM  VORP         Awards  \n0  ...  28.4   5.9  1.7   7.6  0.120   3.8  -0.8   2.9   3.7             AS  \n1  ...  40.5  11.4  3.8  15.2  0.254   9.4   1.6  11.0   9.3  MVP-2,AS,NBA1  \n2  ...  31.5   5.5  1.9   7.4  0.123   5.2  -1.0   4.2   4.4        AS,NBA3  \n3  ...  22.8   4.5  2.6   7.1  0.120   2.1  -0.5   1.6   2.6            NaN  \n4  ...  23.5   3.2  1.8   5.0  0.127   2.7  -0.2   2.4   2.1            NaN  \n\n[5 rows x 30 columns]\n\nDataset Info\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4296 entries, 0 to 4295\nData columns (total 30 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  4296 non-null   int64  \n 1   Season      4296 non-null   int64  \n 2   Player      4296 non-null   object \n 3   Age         4290 non-null   float64\n 4   Team        4290 non-null   object \n 5   Pos         4290 non-null   object \n 6   G           4290 non-null   float64\n 7   GS          4290 non-null   float64\n 8   MP          4290 non-null   float64\n 9   PER         4290 non-null   float64\n 10  TS%         4262 non-null   float64\n 11  3PAr        4260 non-null   float64\n 12  FTr         4260 non-null   float64\n 13  ORB%        4296 non-null   float64\n 14  DRB%        4296 non-null   float64\n 15  TRB%        4296 non-null   float64\n 16  AST%        4296 non-null   float64\n 17  STL%        4296 non-null   float64\n 18  BLK%        4296 non-null   float64\n 19  TOV%        4266 non-null   float64\n 20  USG%        4296 non-null   float64\n 21  OWS         4290 non-null   float64\n 22  DWS         4290 non-null   float64\n 23  WS          4290 non-null   float64\n 24  WS/48       4290 non-null   float64\n 25  OBPM        4290 non-null   float64\n 26  DBPM        4290 non-null   float64\n 27  BPM         4290 non-null   float64\n 28  VORP        4290 non-null   float64\n 29  Awards      319 non-null    object \ndtypes: float64(24), int64(2), object(4)\nmemory usage: 1007.0+ KB\nNone\n\nSummary Statictics\n        Unnamed: 0       Season          Age            G           GS  \\\ncount  4296.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean   2147.500000  2021.537942    26.006760    39.828205    18.212587   \nstd    1240.292707     1.699265     4.171169    24.704211    24.255182   \nmin       0.000000  2019.000000    19.000000     1.000000     0.000000   \n25%    1073.750000  2020.000000    23.000000    17.000000     0.000000   \n50%    2147.500000  2022.000000    25.000000    41.000000     5.000000   \n75%    3221.250000  2023.000000    29.000000    62.000000    29.000000   \nmax    4295.000000  2024.000000    43.000000    84.000000    83.000000   \n\n                MP          PER          TS%         3PAr          FTr  ...  \\\ncount  4290.000000  4290.000000  4262.000000  4260.000000  4260.000000  ...   \nmean    896.133100    12.638718     0.540602     0.398038     0.249558  ...   \nstd     766.699467     6.843749     0.114524     0.223305     0.205775  ...   \nmin       1.000000   -45.200000     0.000000     0.000000     0.000000  ...   \n25%     199.000000     9.500000     0.506000     0.260750     0.141000  ...   \n50%     707.500000    12.600000     0.553000     0.408000     0.223000  ...   \n75%    1475.750000    16.100000     0.596000     0.544250     0.316000  ...   \nmax    3028.000000    80.300000     1.500000     1.000000     4.000000  ...   \n\n              TOV%         USG%          OWS          DWS           WS  \\\ncount  4266.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean     12.468401    18.234916     0.949301     0.895128     1.846340   \nstd       6.858016     5.869599     1.592891     0.935413     2.342021   \nmin       0.000000     0.000000    -3.000000    -0.500000    -1.900000   \n25%       9.200000    14.400000     0.000000     0.200000     0.100000   \n50%      11.800000    17.600000     0.300000     0.600000     1.000000   \n75%      14.800000    21.400000     1.400000     1.400000     2.800000   \nmax     100.000000    72.500000    12.200000     5.900000    17.000000   \n\n             WS/48         OBPM         DBPM          BPM         VORP  \ncount  4290.000000  4290.000000  4290.000000  4290.000000  4290.000000  \nmean      0.071516    -1.675664    -0.241865    -1.917902     0.423357  \nstd       0.108847     4.057487     2.058934     5.220443     1.075243  \nmin      -1.231000   -52.400000   -31.100000   -81.400000    -2.000000  \n25%       0.035000    -3.300000    -1.100000    -3.700000    -0.100000  \n50%       0.079000    -1.400000    -0.200000    -1.500000     0.000000  \n75%       0.122000     0.300000     0.700000     0.500000     0.600000  \nmax       1.261000    40.100000    32.700000    52.000000    10.600000  \n\n[8 rows x 26 columns]\n\nMissing values in each column:\nUnnamed: 0       0\nSeason           0\nPlayer           0\nAge              6\nTeam             6\nPos              6\nG                6\nGS               6\nMP               6\nPER              6\nTS%             34\n3PAr            36\nFTr             36\nORB%             0\nDRB%             0\nTRB%             0\nAST%             0\nSTL%             0\nBLK%             0\nTOV%            30\nUSG%             0\nOWS              6\nDWS              6\nWS               6\nWS/48            6\nOBPM             6\nDBPM             6\nBPM              6\nVORP             6\nAwards        3977\ndtype: int64\n\nColumn names:\nIndex(['Unnamed: 0', 'Season', 'Player', 'Age', 'Team', 'Pos', 'G', 'GS', 'MP',\n       'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%',\n       'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM',\n       'BPM', 'VORP', 'Awards'],\n      dtype='object')\n\n\n\ndf_per_ts = df[['Season','Player','PER','TS%']].dropna()\nsave_path_PER = \"../data/PER-TS%.csv\"\ndf_per_ts.to_csv(save_path_PER,index=False)\nprint(df_per_ts)\n\ndf_salary = pd.read_csv(\"../data/NBA Salaries(2019-2024).csv\")\nprint(df_salary.head())\n\n\n      Season              Player   PER    TS%\n0       2019        Bradley Beal  20.8  0.581\n1       2019        James Harden  30.6  0.616\n2       2019        Kemba Walker  21.7  0.558\n3       2019       Tobias Harris  17.2  0.592\n4       2019       Tobias Harris  18.2  0.605\n...      ...                 ...   ...    ...\n4286    2024     Markquis Nowell  55.5  0.532\n4287    2024         Isaiah Wong  -1.1  0.333\n4289    2024  Izaiah Brockington  26.6  0.400\n4291    2024      Jalen Crutcher -12.6  0.000\n4292    2024   Dmytro Skapintsev -19.3  0.000\n\n[4256 rows x 4 columns]\n   Unnamed: 0         playerName      2019/20   2019/20(*)      2020/21  \\\n0           0      Stephen Curry  $40,231,758  $49,346,703  $43,006,362   \n1           1  Russell Westbrook  $38,506,482  $47,230,546  $41,358,814   \n2           2         Chris Paul  $38,506,482  $47,230,546  $41,358,814   \n3           3       James Harden  $38,199,000  $46,853,401  $41,254,920   \n4           4          John Wall  $38,199,000  $46,853,401  $41,254,920   \n\n    2020/21(*)      2021/22   2021/22(*)      2022/23   2022/23(*)  \\\n0  $52,411,485  $45,780,966  $52,938,707  $48,070,014  $50,968,059   \n1  $50,403,633  $44,211,146  $51,123,449  $47,080,179  $49,918,548   \n2  $50,403,633  $30,800,000  $35,615,504  $28,400,000  $30,112,179   \n3  $50,277,018  $44,310,840  $51,238,730  $33,000,000  $34,989,504   \n4  $50,277,018  $44,310,840  $51,238,730  $47,345,760  $50,200,141   \n\n       2023/24   2023/24(*)  \n0  $51,915,615  $53,458,234  \n1   $3,835,738   $3,949,713  \n2  $30,800,000  $31,715,190  \n3  $35,680,595  $36,740,807  \n4          NaN          NaN  \n\n\n\ndf_2019_20 = df_salary[['playerName','2019/20']].dropna()\ndf_2020_21 = df_salary[['playerName','2020/21']].dropna()\ndf_2021_22 = df_salary[['playerName','2021/22']].dropna()\ndf_2022_23 = df_salary[['playerName','2022/23']].dropna()\ndf_2023_24 = df_salary[['playerName','2023/24']].dropna()\ndf_2019_20.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2020_21.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2021_22.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2022_23.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2023_24.rename(columns={'playerName':'Player_name'}, inplace=True)\n\ndf_selectd = df[['Season','Player','Pos']]\ndf_selectd.rename(columns={'Player':'player_name','Season':'season'}, inplace=True)\nsave_path_6 = \"../data/player_pos.csv\"\ndf_selectd.to_csv(save_path_6, index=False)\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_38744\\1694157263.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_selectd.rename(columns={'Player':'player_name','Season':'season'}, inplace=True)\n\n\n\ndf_pos = pd.read_csv(\"../data/player_pos.csv\")\n\nseasons = df_pos[\"season\"].unique()\n\nfor season in seasons:\n    df_season = df_pos[df_pos[\"season\"] == season]\n    file_name = f\"season_{season}.csv\"\n    save_path_7 = f\"../data/{file_name}\"\n    df_season.to_csv(save_path_7, index=False)\n\ndf_pos_2019 = pd.read_csv(\"../data/season_2019.csv\")\ndf_pos_2020 = pd.read_csv(\"../data/season_2020.csv\")\ndf_pos_2021 = pd.read_csv(\"../data/season_2021.csv\")\ndf_pos_2022 = pd.read_csv(\"../data/season_2022.csv\")\n\ndf_merged_data_2019 = pd.read_csv(\"../data/merged_data_19-20.csv\")\ndf_merged_data_2020 = pd.read_csv(\"../data/merged_data_20-21.csv\")\ndf_merged_data_2021 = pd.read_csv(\"../data/merged_data_21-22.csv\")\ndf_merged_data_2022 = pd.read_csv(\"../data/merged_data_22-23.csv\")\n\ndf_merged_data_pos_2019 = pd.merge(df_merged_data_2019, df_pos_2019, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2020 = pd.merge(df_merged_data_2020, df_pos_2020, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2021 = pd.merge(df_merged_data_2021, df_pos_2021, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2022 = pd.merge(df_merged_data_2022, df_pos_2022, on='player_name', how='left').dropna(subset=['Pos'])\n\nsave_path_8 = \"../data/merged_data_pos-2019.csv\"\nsave_path_9 = \"../data/merged_data_pos-2020.csv\"\nsave_path_10 = \"../data/merged_data_pos-2021.csv\"\nsave_path_11 = \"../data/merged_data_pos-2022.csv\"\ndf_merged_data_pos_2019.to_csv(save_path_8, index=False)\ndf_merged_data_pos_2020.to_csv(save_path_9, index=False)\ndf_merged_data_pos_2021.to_csv(save_path_10, index=False)\ndf_merged_data_pos_2022.to_csv(save_path_11, index=False)"
  },
  {
    "objectID": "model/Model.html",
    "href": "model/Model.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\n\nfile_list=[\"./data/merged_data_pos-2019.csv\",\"./data/merged_data_pos-2020.csv\",\n           \"./data/merged_data_pos-2021.csv\",\"./data/merged_data_pos-2022.csv\"]\ndf = combined = pd.concat([pd.read_csv(file)for file in file_list],ignore_index=True)\n#df  = pd.read_csv(\"../data/merged_data_pos-2019.csv\")\ndf.head(3)\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[10], line 3\n      1 file_list=[\"../data/merged_data_pos-2019.csv\",\"./data/merged_data_pos-2020.csv\",\n      2            \"./data/merged_data_pos-2021.csv\",\"./data/merged_data_pos-2022.csv\"]\n----&gt; 3 df = combined = pd.concat([pd.read_csv(file)for file in file_list],ignore_index=True)\n      4 #df  = pd.read_csv(\"../data/merged_data_pos-2019.csv\")\n      5 df.head(3)\n\nFile c:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1026, in read_csv(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\n   1013 kwds_defaults = _refine_defaults_read(\n   1014     dialect,\n   1015     delimiter,\n   (...)\n   1022     dtype_backend=dtype_backend,\n   1023 )\n   1024 kwds.update(kwds_defaults)\n-&gt; 1026 return _read(filepath_or_buffer, kwds)\n\nFile c:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:620, in _read(filepath_or_buffer, kwds)\n    617 _validate_names(kwds.get(\"names\", None))\n    619 # Create the parser.\n--&gt; 620 parser = TextFileReader(filepath_or_buffer, **kwds)\n    622 if chunksize or iterator:\n    623     return parser\n\nFile c:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1620, in TextFileReader.__init__(self, f, engine, **kwds)\n   1617     self.options[\"has_index_names\"] = kwds[\"has_index_names\"]\n   1619 self.handles: IOHandles | None = None\n-&gt; 1620 self._engine = self._make_engine(f, self.engine)\n\nFile c:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1880, in TextFileReader._make_engine(self, f, engine)\n   1878     if \"b\" not in mode:\n   1879         mode += \"b\"\n-&gt; 1880 self.handles = get_handle(\n   1881     f,\n   1882     mode,\n   1883     encoding=self.options.get(\"encoding\", None),\n   1884     compression=self.options.get(\"compression\", None),\n   1885     memory_map=self.options.get(\"memory_map\", False),\n   1886     is_text=is_text,\n   1887     errors=self.options.get(\"encoding_errors\", \"strict\"),\n   1888     storage_options=self.options.get(\"storage_options\", None),\n   1889 )\n   1890 assert self.handles is not None\n   1891 f = self.handles.handle\n\nFile c:\\ProgramData\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:873, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    868 elif isinstance(handle, str):\n    869     # Check whether the filename is to be opened in binary mode.\n    870     # Binary mode does not support 'encoding' and 'newline'.\n    871     if ioargs.encoding and \"b\" not in ioargs.mode:\n    872         # Encoding\n--&gt; 873         handle = open(\n    874             handle,\n    875             ioargs.mode,\n    876             encoding=ioargs.encoding,\n    877             errors=errors,\n    878             newline=\"\",\n    879         )\n    880     else:\n    881         # Binary mode\n    882         handle = open(handle, ioargs.mode)\n\nFileNotFoundError: [Errno 2] No such file or directory: '../data/merged_data_pos-2019.csv'\n\n\n\n\nold_df = df[['player_name','pts','reb','ast','Salary']]\nnew_df = df[['player_name','age','player_weight','player_weight','pts','reb','ast',\n             'net_rating','oreb_pct','dreb_pct','usg_pct','ts_pct','ast_pct','Salary']]\nprint(old_df)\nprint(new_df)\n\n          player_name   pts  reb  ast    Salary\n0        Aaron Gordon  14.4  7.7  3.7  19863636\n1       Aaron Holiday   9.5  2.4  3.4   2239200\n2         Abdel Nader   6.3  1.8  0.7   1618520\n3          Al Horford  11.9  6.8  4.0  28000000\n4     Al-Farouq Aminu   4.3  4.8  1.2   9258000\n...               ...   ...  ...  ...       ...\n1826    Yuta Watanabe   5.6  2.4  0.8   1968175\n1827     Zach Collins  11.6  6.4  2.9   7350000\n1828      Zach LaVine  24.8  4.5  4.2  37096500\n1829       Zeke Nnaji   5.2  2.6  0.3   2617800\n1830  Ziaire Williams   5.7  2.1  0.9   4591680\n\n[1831 rows x 5 columns]\n          player_name  age  player_weight  player_weight   pts  reb  ast  \\\n0        Aaron Gordon   24      106.59412      106.59412  14.4  7.7  3.7   \n1       Aaron Holiday   23       83.91452       83.91452   9.5  2.4  3.4   \n2         Abdel Nader   26      102.05820      102.05820   6.3  1.8  0.7   \n3          Al Horford   34      108.86208      108.86208  11.9  6.8  4.0   \n4     Al-Farouq Aminu   29       99.79024       99.79024   4.3  4.8  1.2   \n...               ...  ...            ...            ...   ...  ...  ...   \n1826    Yuta Watanabe   28       97.52228       97.52228   5.6  2.4  0.8   \n1827     Zach Collins   25      113.39800      113.39800  11.6  6.4  2.9   \n1828      Zach LaVine   28       90.71840       90.71840  24.8  4.5  4.2   \n1829       Zeke Nnaji   22      108.86208      108.86208   5.2  2.6  0.3   \n1830  Ziaire Williams   21       83.91452       83.91452   5.7  2.1  0.9   \n\n      net_rating  oreb_pct  dreb_pct  usg_pct  ts_pct  ast_pct    Salary  \n0           -1.2     0.050     0.181    0.205   0.516    0.165  19863636  \n1            2.2     0.013     0.077    0.182   0.521    0.188   2239200  \n2           -4.2     0.016     0.095    0.164   0.591    0.068   1618520  \n3            3.3     0.051     0.171    0.173   0.536    0.187  28000000  \n4           -5.4     0.053     0.158    0.127   0.395    0.088   9258000  \n...          ...       ...       ...      ...     ...      ...       ...  \n1826        -0.6     0.034     0.117    0.127   0.637    0.071   1968175  \n1827        -7.5     0.076     0.190    0.209   0.599    0.180   7350000  \n1828         0.3     0.016     0.108    0.278   0.607    0.187  37096500  \n1829        -5.9     0.087     0.099    0.149   0.620    0.040   2617800  \n1830        -5.2     0.028     0.105    0.178   0.511    0.086   4591680  \n\n[1831 rows x 14 columns]\n\n\n\nold_df.isnull().sum().sort_values(ascending=False)\nnew_df.isnull().sum().sort_values(ascending=False)\n\nplayer_name      0\nage              0\nplayer_weight    0\nplayer_weight    0\npts              0\nreb              0\nast              0\nnet_rating       0\noreb_pct         0\ndreb_pct         0\nusg_pct          0\nts_pct           0\nast_pct          0\nSalary           0\ndtype: int64\n\n\n\nx_old = old_df.drop(columns=['Salary','player_name'])\ny_old = new_df['Salary']\nx_train_old,x_test_old,y_train_old,y_test_old = train_test_split(x_old,y_old,test_size=0.2,random_state=123)\nx_new = new_df.drop(columns=['Salary',\"player_name\"])\ny_new = new_df['Salary']\nx_train_new, x_test_new, y_train_new, y_test_new = train_test_split(x_new, y_new, test_size=0.2, random_state=123)\n\n\n# models to train\nmodels = {\n    'Linear Regression': LinearRegression(),\n    'KNN Regressor': KNeighborsRegressor(n_neighbors=5),\n    'SVM Regressor': SVR(C=1.0, epsilon=0.2),\n    'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=42)\n}\n\n# the function to train and evaluate models\ndef evaluate_models(X_train, X_test, y_train, y_test, tag=''):\n    results = {}\n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        \n        mae = mean_absolute_error(y_test, y_pred)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        r2 = r2_score(y_test, y_pred)\n        \n        results[f'{tag}_{name}'] = {\n            'MAE': mae,\n            'RMSE': rmse,\n            'R2 Score': r2\n        }\n    return results\n\nresults_old = evaluate_models(x_train_old, x_test_old, y_train_old, y_test_old, tag='Three Features')\n\n#combine all results together\nall_results_old = {**results_old}\nresults_df_old = pd.DataFrame(all_results_old).T\nprint(\"\\nComparison of models without feature enrichment:\")\nprint(results_df_old)\n\nresults_new = evaluate_models(x_train_new, x_test_new, y_train_new, y_test_new, tag='All Features')\n\nall_results_new = {**results_new}\nresults_df_new = pd.DataFrame(all_results_new).T\nprint(\"\\nComparison of models with feature enrichment\")\nprint(results_df_new)\n\n\nComparison of models without feature enrichment:\n                                                 MAE          RMSE  R2 Score\nThree Features_Linear Regression        4.959101e+06  6.887345e+06  0.569023\nThree Features_KNN Regressor            4.637137e+06  7.038563e+06  0.549890\nThree Features_SVM Regressor            7.089396e+06  1.169547e+07 -0.242758\nThree Features_Random Forest Regressor  4.100074e+06  6.562109e+06  0.608765\n\nComparison of models with feature enrichment\n                                               MAE          RMSE  R2 Score\nAll Features_Linear Regression        4.660642e+06  6.097851e+06  0.662165\nAll Features_KNN Regressor            4.111459e+06  5.947605e+06  0.678608\nAll Features_SVM Regressor            7.089481e+06  1.169553e+07 -0.242771\nAll Features_Random Forest Regressor  2.652626e+06  4.316311e+06  0.830731\n\n\n\nresults_df_old[\"Model Type\"] = \"Three Features\"\nresults_df_new[\"Model Type\"] = \"All Features\"\n\ncombined_df = pd.concat([results_df_old, results_df_new])\ncombined_df.reset_index(inplace=True)\ncombined_df.rename(columns={\"index\": \"Model\"}, inplace=True)\n\nsns.set(style=\"whitegrid\")\nfig, axes = plt.subplots(3, 1, figsize=(12, 16))\n\n# MAE plot\nsns.barplot(data=combined_df, x=\"MAE\", y=\"Model\", hue=\"Model Type\", ax=axes[0])\naxes[0].set_title(\"MAE Comparison (Lower is Better)\")\n\n# RMSE plot\nsns.barplot(data=combined_df, x=\"RMSE\", y=\"Model\", hue=\"Model Type\", ax=axes[1])\naxes[1].set_title(\"RMSE Comparison (Lower is Better)\")\n\n# R² plot\nsns.barplot(data=combined_df, x=\"R2 Score\", y=\"Model\", hue=\"Model Type\", ax=axes[2])\naxes[2].set_title(\"R² Score Comparison (Higher is Better)\")\n\nplt.tight_layout()\nplt.show()"
  }
]