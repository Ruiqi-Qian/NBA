[
  {
    "objectID": "visualization/visual.html",
    "href": "visualization/visual.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.pyplot import legend\n\n\n\n\n\nCode\n# Load PER and TS% dataset and display the first few rows\ndf_per_ts = pd.read_csv(\"../data/PER-TS%.csv\")\nprint(df_per_ts.head())\n\n# Boxplot: Player Efficiency Rating (PER) by Season\nplt.figure(figsize=(10, 6))\nsns.boxplot(y=df_per_ts['PER'], x=df_per_ts['Season'])\nplt.grid(True)\nplt.title(\"PER Distribution by Season\")\nplt.show()\n\n# Load seasonal player data from 2019 to 2022\ndf_19 = pd.read_csv(\"../data/merged_data_pos-2019.csv\")\ndf_20 = pd.read_csv(\"../data/merged_data_pos-2020.csv\")\ndf_21 = pd.read_csv(\"../data/merged_data_pos-2021.csv\")\ndf_22 = pd.read_csv(\"../data/merged_data_pos-2022.csv\")\n\n# Add season labels\ndf_19['season'] = \"2019-20\"\ndf_20['season'] = \"2020-21\"\ndf_21['season'] = \"2021-22\"\ndf_22['season'] = \"2022-23\"\n\n# Combine PTS and Season into a single dataframe for KDE plot\ndf_all_seasons = pd.concat([\n    df_19[['pts', 'season']],\n    df_20[['pts', 'season']],\n    df_21[['pts', 'season']],\n    df_22[['pts', 'season']]\n], ignore_index=True)\n\nprint(df_all_seasons)\n\n\n\n   Season         Player   PER    TS%\n0    2019   Bradley Beal  20.8  0.581\n1    2019   James Harden  30.6  0.616\n2    2019   Kemba Walker  21.7  0.558\n3    2019  Tobias Harris  17.2  0.592\n4    2019  Tobias Harris  18.2  0.605\n\n\n\n\n\n\n\n\n\n       pts   season\n0     14.4  2019-20\n1      9.5  2019-20\n2      6.3  2019-20\n3     11.9  2019-20\n4      4.3  2019-20\n...    ...      ...\n1826   5.6  2022-23\n1827  11.6  2022-23\n1828  24.8  2022-23\n1829   5.2  2022-23\n1830   5.7  2022-23\n\n[1831 rows x 2 columns]\n\n\n\n\nCode\n# KDE plot: Distribution of Points per Game across seasons\nplt.figure(figsize=(10, 6))\nsns.kdeplot(data=df_all_seasons, x='pts', hue='season', fill=True, common_norm=False, alpha=0.4)\nplt.xlabel(\"Average Points Per Game (PTS)\", fontsize=12)\nplt.ylabel(\"Density\", fontsize=12)\nplt.legend(title='Season')\nplt.grid(True)\nplt.title(\"Scoring Distribution by Season\")\nplt.show()\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2875802610.py:6: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n  plt.legend(title='Season')\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Scatter + Regression plots for Salary vs Points (each season)\n\n# 2019-20\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_19, x='season.y', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2019-20: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2020-21\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_20, x='2020/21', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2020-21: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2021-22\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_21, x='2021/22', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2021-22: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n# 2022-23\nplt.figure(figsize=(10, 6))\nsns.regplot(data=df_22, x='2022/23', y='pts', scatter_kws={'alpha': 0.5}, line_kws={\"color\": \"red\"})\nplt.xscale(\"log\")\nplt.xlabel(\"Salary\")\nplt.ylabel(\"Average Points Per Game\")\nplt.title(\"2022-23: Salary vs Points\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Correlation heatmaps for each season\n\n# 2022\nplt.figure(figsize=(10, 6))\ncorr_matrix_22 = df_22[[\"pts\", \"reb\", \"ast\", \"2022/23\"]].corr()\nsns.heatmap(corr_matrix_22, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2022-23 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2021\nplt.figure(figsize=(10, 6))\ncorr_matrix_21 = df_21[[\"pts\", \"reb\", \"ast\", \"2021/22\"]].corr()\nsns.heatmap(corr_matrix_21, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2021-22 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2020\nplt.figure(figsize=(10, 6))\ncorr_matrix_20 = df_20[[\"pts\", \"reb\", \"ast\", \"2020/21\"]].corr()\nsns.heatmap(corr_matrix_20, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2020-21 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n# 2019\nplt.figure(figsize=(10, 6))\ncorr_matrix_19 = df_19[[\"pts\", \"reb\", \"ast\", \"season.y\"]].corr()\nsns.heatmap(corr_matrix_19, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\nplt.title(\"2019-20 Correlation: Points, Rebounds, Assists vs Salary\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Boxplots of performance metrics by player position for each season\n\n# 2019\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2019-20: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2019-20: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_19, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2019-20: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2020\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2020-21: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2020-21: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_20, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2020-21: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2021\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2021-22: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2021-22: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_21, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2021-22: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n# 2022\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nplt.title(\"2022-23: Position vs PTS\")\nplt.subplot(1, 3, 2)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nplt.title(\"2022-23: Position vs REB\")\nplt.subplot(1, 3, 3)\nsns.boxplot(data=df_22, x=\"Pos\", y=\"ast\", palette=\"Reds\")\nplt.title(\"2022-23: Position vs AST\")\nplt.tight_layout()\nplt.show()\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:6: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:9: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:12: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_19, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:20: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:23: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:26: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_20, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:34: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:37: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:40: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_21, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:48: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"pts\", palette=\"Blues\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:51: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"reb\", palette=\"Greens\")\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2990118663.py:54: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.boxplot(data=df_22, x=\"Pos\", y=\"ast\", palette=\"Reds\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Bar plots: Average Salary by Position\n\n# 2019\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_19, x=\"Pos\", y=\"season.y\", palette=\"coolwarm\")\nplt.title(\"2019-20: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2020\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_20, x=\"Pos\", y=\"2020/21\", palette=\"coolwarm\")\nplt.title(\"2020-21: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2021\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_21, x=\"Pos\", y=\"2021/22\", palette=\"coolwarm\")\nplt.title(\"2021-22: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n# 2022\nplt.figure(figsize=(10, 6))\nsns.barplot(data=df_22, x=\"Pos\", y=\"2022/23\", palette=\"coolwarm\")\nplt.title(\"2022-23: Average Salary by Position\")\nplt.ylabel(\"Average Salary\")\nplt.xlabel(\"Position\")\nplt.grid(True)\nplt.show()\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:5: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_19, x=\"Pos\", y=\"season.y\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:14: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_20, x=\"Pos\", y=\"2020/21\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:23: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_21, x=\"Pos\", y=\"2021/22\", palette=\"coolwarm\")\n\n\n\n\n\n\n\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_23776\\2563337894.py:32: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df_22, x=\"Pos\", y=\"2022/23\", palette=\"coolwarm\")"
  },
  {
    "objectID": "pytest/test-1.html",
    "href": "pytest/test-1.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "!pytest data_cleaning.py -s\n\n============================= test session starts =============================\nplatform win32 -- Python 3.12.7, pytest-7.4.4, pluggy-1.0.0\nrootdir: c:\\adv\nplugins: anyio-4.2.0\nLoaded NBA Advanced Stats with 4296 rows.\nFirst 5 rows of the NBA Advanced Stats dataset:\n   Unnamed: 0  Season         Player   Age  ... DBPM   BPM  VORP         Awards\n0           0    2019   Bradley Beal  25.0  ... -0.8   2.9   3.7             AS\n1           1    2019   James Harden  29.0  ...  1.6  11.0   9.3  MVP-2,AS,NBA1\n2           2    2019   Kemba Walker  28.0  ... -1.0   4.2   4.4        AS,NBA3\n3           3    2019  Tobias Harris  26.0  ... -0.5   1.6   2.6            NaN\n4           4    2019  Tobias Harris  26.0  ... -0.2   2.4   2.1            NaN\n\n[5 rows x 30 columns]\n\nDataset Info\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4296 entries, 0 to 4295\nData columns (total 30 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  4296 non-null   int64  \n 1   Season      4296 non-null   int64  \n 2   Player      4296 non-null   object \n 3   Age         4290 non-null   float64\n 4   Team        4290 non-null   object \n 5   Pos         4290 non-null   object \n 6   G           4290 non-null   float64\n 7   GS          4290 non-null   float64\n 8   MP          4290 non-null   float64\n 9   PER         4290 non-null   float64\n 10  TS%         4262 non-null   float64\n 11  3PAr        4260 non-null   float64\n 12  FTr         4260 non-null   float64\n 13  ORB%        4296 non-null   float64\n 14  DRB%        4296 non-null   float64\n 15  TRB%        4296 non-null   float64\n 16  AST%        4296 non-null   float64\n 17  STL%        4296 non-null   float64\n 18  BLK%        4296 non-null   float64\n 19  TOV%        4266 non-null   float64\n 20  USG%        4296 non-null   float64\n 21  OWS         4290 non-null   float64\n 22  DWS         4290 non-null   float64\n 23  WS          4290 non-null   float64\n 24  WS/48       4290 non-null   float64\n 25  OBPM        4290 non-null   float64\n 26  DBPM        4290 non-null   float64\n 27  BPM         4290 non-null   float64\n 28  VORP        4290 non-null   float64\n 29  Awards      319 non-null    object \ndtypes: float64(24), int64(2), object(4)\nmemory usage: 1007.0+ KB\nNone\n\nSummary Statictics\n        Unnamed: 0       Season  ...          BPM         VORP\ncount  4296.000000  4296.000000  ...  4290.000000  4290.000000\nmean   2147.500000  2021.537942  ...    -1.917902     0.423357\nstd    1240.292707     1.699265  ...     5.220443     1.075243\nmin       0.000000  2019.000000  ...   -81.400000    -2.000000\n25%    1073.750000  2020.000000  ...    -3.700000    -0.100000\n50%    2147.500000  2022.000000  ...    -1.500000     0.000000\n75%    3221.250000  2023.000000  ...     0.500000     0.600000\nmax    4295.000000  2024.000000  ...    52.000000    10.600000\n\n[8 rows x 26 columns]\n\nMissing values in each column:\nUnnamed: 0       0\nSeason           0\nPlayer           0\nAge              6\nTeam             6\nPos              6\nG                6\nGS               6\nMP               6\nPER              6\nTS%             34\n3PAr            36\nFTr             36\nORB%             0\nDRB%             0\nTRB%             0\nAST%             0\nSTL%             0\nBLK%             0\nTOV%            30\nUSG%             0\nOWS              6\nDWS              6\nWS               6\nWS/48            6\nOBPM             6\nDBPM             6\nBPM              6\nVORP             6\nAwards        3977\ndtype: int64\n\nColumn names:\nIndex(['Unnamed: 0', 'Season', 'Player', 'Age', 'Team', 'Pos', 'G', 'GS', 'MP',\n       'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%',\n       'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM',\n       'BPM', 'VORP', 'Awards'],\n      dtype='object')\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n______________________ ERROR collecting data_cleaning.py ______________________\ndata_cleaning.py:26: in &lt;module&gt;\n    df_per_ts.to_csv(save_path_PER,index=False)\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\util\\_decorators.py:333: in wrapper\n    return func(*args, **kwargs)\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:3967: in to_csv\n    return DataFrameRenderer(formatter).to_csv(\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\formats\\format.py:1014: in to_csv\n    csv_formatter.save()\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\formats\\csvs.py:251: in save\n    with get_handle(\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:749: in get_handle\n    check_parent_directory(str(handle))\nC:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:616: in check_parent_directory\n    raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\nE   OSError: Cannot save file into a non-existent directory: 'E:\\Advanced program'\n=========================== short test summary info ===========================\nERROR data_cleaning.py - OSError: Cannot save file into a non-existent directory: 'E:\\Advanced program'\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 1.56s ===============================\n\n\n\nimport types\n\n# 运行一遍你的 data_cleaning.py，把里面的变量读到 namespace\nnamespace = types.SimpleNamespace()\nwith open('C:/adv/data_cleaning.py', encoding='utf-8') as f:\n    code = f.read()\nexec(code, namespace.__dict__)\n\ndef test_no_missing_values_in_key_dataframes():\n    \"\"\"Test that key DataFrames from data_cleaning.py have no missing values.\"\"\"\n\n    important_dfs = [\n        'df_per_ts', \n        'df_salary', \n        'df_selectd', \n        'df_pos',\n        'df_pos_2019',\n        'df_pos_2020',\n        'df_pos_2021',\n        'df_pos_2022',\n        'df_merged_data_2019',\n        'df_merged_data_2020',\n        'df_merged_data_2021',\n        'df_merged_data_2022'\n    ]\n\n    for df_name in important_dfs:\n        df = getattr(namespace, df_name)\n        missing = df.isnull().sum().sum()\n        print(f\"{df_name}: missing values = {missing}\")\n        assert missing == 0, f\"❌ {df_name} contains missing values!\"\n\nLoaded NBA Advanced Stats with 4296 rows.\nFirst 5 rows of the NBA Advanced Stats dataset:\n   Unnamed: 0  Season         Player   Age Team Pos     G    GS      MP   PER  \\\n0           0    2019   Bradley Beal  25.0  WAS  SG  82.0  82.0  3028.0  20.8   \n1           1    2019   James Harden  29.0  HOU  PG  78.0  78.0  2867.0  30.6   \n2           2    2019   Kemba Walker  28.0  CHO  PG  82.0  82.0  2863.0  21.7   \n3           3    2019  Tobias Harris  26.0  2TM  PF  82.0  82.0  2847.0  17.2   \n4           4    2019  Tobias Harris  26.0  LAC  PF  55.0  55.0  1903.0  18.2   \n\n   ...  USG%   OWS  DWS    WS  WS/48  OBPM  DBPM   BPM  VORP         Awards  \n0  ...  28.4   5.9  1.7   7.6  0.120   3.8  -0.8   2.9   3.7             AS  \n1  ...  40.5  11.4  3.8  15.2  0.254   9.4   1.6  11.0   9.3  MVP-2,AS,NBA1  \n2  ...  31.5   5.5  1.9   7.4  0.123   5.2  -1.0   4.2   4.4        AS,NBA3  \n3  ...  22.8   4.5  2.6   7.1  0.120   2.1  -0.5   1.6   2.6            NaN  \n4  ...  23.5   3.2  1.8   5.0  0.127   2.7  -0.2   2.4   2.1            NaN  \n\n[5 rows x 30 columns]\n\nDataset Info\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4296 entries, 0 to 4295\nData columns (total 30 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  4296 non-null   int64  \n 1   Season      4296 non-null   int64  \n 2   Player      4296 non-null   object \n 3   Age         4290 non-null   float64\n 4   Team        4290 non-null   object \n 5   Pos         4290 non-null   object \n 6   G           4290 non-null   float64\n 7   GS          4290 non-null   float64\n 8   MP          4290 non-null   float64\n 9   PER         4290 non-null   float64\n 10  TS%         4262 non-null   float64\n 11  3PAr        4260 non-null   float64\n 12  FTr         4260 non-null   float64\n 13  ORB%        4296 non-null   float64\n 14  DRB%        4296 non-null   float64\n 15  TRB%        4296 non-null   float64\n 16  AST%        4296 non-null   float64\n 17  STL%        4296 non-null   float64\n 18  BLK%        4296 non-null   float64\n 19  TOV%        4266 non-null   float64\n 20  USG%        4296 non-null   float64\n 21  OWS         4290 non-null   float64\n 22  DWS         4290 non-null   float64\n 23  WS          4290 non-null   float64\n 24  WS/48       4290 non-null   float64\n 25  OBPM        4290 non-null   float64\n 26  DBPM        4290 non-null   float64\n 27  BPM         4290 non-null   float64\n 28  VORP        4290 non-null   float64\n 29  Awards      319 non-null    object \ndtypes: float64(24), int64(2), object(4)\nmemory usage: 1007.0+ KB\nNone\n\nSummary Statictics\n        Unnamed: 0       Season          Age            G           GS  \\\ncount  4296.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean   2147.500000  2021.537942    26.006760    39.828205    18.212587   \nstd    1240.292707     1.699265     4.171169    24.704211    24.255182   \nmin       0.000000  2019.000000    19.000000     1.000000     0.000000   \n25%    1073.750000  2020.000000    23.000000    17.000000     0.000000   \n50%    2147.500000  2022.000000    25.000000    41.000000     5.000000   \n75%    3221.250000  2023.000000    29.000000    62.000000    29.000000   \nmax    4295.000000  2024.000000    43.000000    84.000000    83.000000   \n\n                MP          PER          TS%         3PAr          FTr  ...  \\\ncount  4290.000000  4290.000000  4262.000000  4260.000000  4260.000000  ...   \nmean    896.133100    12.638718     0.540602     0.398038     0.249558  ...   \nstd     766.699467     6.843749     0.114524     0.223305     0.205775  ...   \nmin       1.000000   -45.200000     0.000000     0.000000     0.000000  ...   \n25%     199.000000     9.500000     0.506000     0.260750     0.141000  ...   \n50%     707.500000    12.600000     0.553000     0.408000     0.223000  ...   \n75%    1475.750000    16.100000     0.596000     0.544250     0.316000  ...   \nmax    3028.000000    80.300000     1.500000     1.000000     4.000000  ...   \n\n              TOV%         USG%          OWS          DWS           WS  \\\ncount  4266.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean     12.468401    18.234916     0.949301     0.895128     1.846340   \nstd       6.858016     5.869599     1.592891     0.935413     2.342021   \nmin       0.000000     0.000000    -3.000000    -0.500000    -1.900000   \n25%       9.200000    14.400000     0.000000     0.200000     0.100000   \n50%      11.800000    17.600000     0.300000     0.600000     1.000000   \n75%      14.800000    21.400000     1.400000     1.400000     2.800000   \nmax     100.000000    72.500000    12.200000     5.900000    17.000000   \n\n             WS/48         OBPM         DBPM          BPM         VORP  \ncount  4290.000000  4290.000000  4290.000000  4290.000000  4290.000000  \nmean      0.071516    -1.675664    -0.241865    -1.917902     0.423357  \nstd       0.108847     4.057487     2.058934     5.220443     1.075243  \nmin      -1.231000   -52.400000   -31.100000   -81.400000    -2.000000  \n25%       0.035000    -3.300000    -1.100000    -3.700000    -0.100000  \n50%       0.079000    -1.400000    -0.200000    -1.500000     0.000000  \n75%       0.122000     0.300000     0.700000     0.500000     0.600000  \nmax       1.261000    40.100000    32.700000    52.000000    10.600000  \n\n[8 rows x 26 columns]\n\nMissing values in each column:\nUnnamed: 0       0\nSeason           0\nPlayer           0\nAge              6\nTeam             6\nPos              6\nG                6\nGS               6\nMP               6\nPER              6\nTS%             34\n3PAr            36\nFTr             36\nORB%             0\nDRB%             0\nTRB%             0\nAST%             0\nSTL%             0\nBLK%             0\nTOV%            30\nUSG%             0\nOWS              6\nDWS              6\nWS               6\nWS/48            6\nOBPM             6\nDBPM             6\nBPM              6\nVORP             6\nAwards        3977\ndtype: int64\n\nColumn names:\nIndex(['Unnamed: 0', 'Season', 'Player', 'Age', 'Team', 'Pos', 'G', 'GS', 'MP',\n       'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%',\n       'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM',\n       'BPM', 'VORP', 'Awards'],\n      dtype='object')\n\n\n\n---------------------------------------------------------------------------\nOSError                                   Traceback (most recent call last)\nCell In[6], line 8\n      6 with open('C:/adv/data_cleaning.py', encoding='utf-8') as f:\n      7     code = f.read()\n----&gt; 8 exec(code, namespace.__dict__)\n     10 def test_no_missing_values():\n     11     \"\"\"Test that key DataFrames in data_cleaning.py have no missing values.\"\"\"\n\nFile &lt;string&gt;:26\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\util\\_decorators.py:333, in deprecate_nonkeyword_arguments.&lt;locals&gt;.decorate.&lt;locals&gt;.wrapper(*args, **kwargs)\n    327 if len(args) &gt; num_allow_args:\n    328     warnings.warn(\n    329         msg.format(arguments=_format_argument_list(allow_args)),\n    330         FutureWarning,\n    331         stacklevel=find_stack_level(),\n    332     )\n--&gt; 333 return func(*args, **kwargs)\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\core\\generic.py:3967, in NDFrame.to_csv(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, decimal, errors, storage_options)\n   3956 df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n   3958 formatter = DataFrameFormatter(\n   3959     frame=df,\n   3960     header=header,\n   (...)\n   3964     decimal=decimal,\n   3965 )\n-&gt; 3967 return DataFrameRenderer(formatter).to_csv(\n   3968     path_or_buf,\n   3969     lineterminator=lineterminator,\n   3970     sep=sep,\n   3971     encoding=encoding,\n   3972     errors=errors,\n   3973     compression=compression,\n   3974     quoting=quoting,\n   3975     columns=columns,\n   3976     index_label=index_label,\n   3977     mode=mode,\n   3978     chunksize=chunksize,\n   3979     quotechar=quotechar,\n   3980     date_format=date_format,\n   3981     doublequote=doublequote,\n   3982     escapechar=escapechar,\n   3983     storage_options=storage_options,\n   3984 )\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\formats\\format.py:1014, in DataFrameRenderer.to_csv(self, path_or_buf, encoding, sep, columns, index_label, mode, compression, quoting, quotechar, lineterminator, chunksize, date_format, doublequote, escapechar, errors, storage_options)\n    993     created_buffer = False\n    995 csv_formatter = CSVFormatter(\n    996     path_or_buf=path_or_buf,\n    997     lineterminator=lineterminator,\n   (...)\n   1012     formatter=self.fmt,\n   1013 )\n-&gt; 1014 csv_formatter.save()\n   1016 if created_buffer:\n   1017     assert isinstance(path_or_buf, StringIO)\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\formats\\csvs.py:251, in CSVFormatter.save(self)\n    247 \"\"\"\n    248 Create the writer & save.\n    249 \"\"\"\n    250 # apply compression and byte/text conversion\n--&gt; 251 with get_handle(\n    252     self.filepath_or_buffer,\n    253     self.mode,\n    254     encoding=self.encoding,\n    255     errors=self.errors,\n    256     compression=self.compression,\n    257     storage_options=self.storage_options,\n    258 ) as handles:\n    259     # Note: self.encoding is irrelevant here\n    260     self.writer = csvlib.writer(\n    261         handles.handle,\n    262         lineterminator=self.lineterminator,\n   (...)\n    267         quotechar=self.quotechar,\n    268     )\n    270     self._save()\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:749, in get_handle(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\n    747 # Only for write methods\n    748 if \"r\" not in mode and is_path:\n--&gt; 749     check_parent_directory(str(handle))\n    751 if compression:\n    752     if compression != \"zstd\":\n    753         # compression libraries do not like an explicit text-mode\n\nFile c:\\Users\\27508\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:616, in check_parent_directory(path)\n    614 parent = Path(path).parent\n    615 if not parent.is_dir():\n--&gt; 616     raise OSError(rf\"Cannot save file into a non-existent directory: '{parent}'\")\n\nOSError: Cannot save file into a non-existent directory: 'E:\\Advanced program'"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "data Wrangling project group 5",
    "section": "Project Summary",
    "text": "Project Summary"
  },
  {
    "objectID": "index.html#accessing-data",
    "href": "index.html#accessing-data",
    "title": "data Wrangling project group 5",
    "section": "Accessing data",
    "text": "Accessing data\nOur raw data can be downloaded here:\nraw data\nOur processed data can be downloaded here:\nprocessed data\nNOTE: do not include your data in your git repo - it will likely be too large and cause issues."
  },
  {
    "objectID": "index.html#python-scripts-notebooks",
    "href": "index.html#python-scripts-notebooks",
    "title": "data Wrangling project group 5",
    "section": "Python scripts / notebooks",
    "text": "Python scripts / notebooks\nThe following scripts/notebooks were used produce the summary:\n\nsrc/script.py\nnotebooks/data_cleaning.ipynb\nnotebooks/data_enrichment.ipynb\nnotebooks/data_analysis.ipynb\n\n[Give a short description of what the notebooks contain, and their location in the git repo]"
  },
  {
    "objectID": "index.html#reproducibility",
    "href": "index.html#reproducibility",
    "title": "data Wrangling project group 5",
    "section": "Reproducibility",
    "text": "Reproducibility\nProvide a requirements.txt file with packages and versions of all python packages to run the analysis."
  },
  {
    "objectID": "index.html#guide",
    "href": "index.html#guide",
    "title": "data Wrangling project group 5",
    "section": "Guide",
    "text": "Guide\n\nSummary\n\nDatasets: We used two main CSV datasets:\n\nPlayer performance (PER, TS %, PTS, REB, AST, etc.) sourced from a public GitHub repo (madhurn1/PredictiveNBAContractValuationModel) covering the 2019 – 2024 seasons.\nAnnual salaries for the same players for 2019/20–2023/24, obtained from a Kaggle dataset (Justinas’s NBA Players Data). Both are simple, comma‑delimited files updated once per season, with key fields like playerName (or Player), season columns (e.g. 2021/22), and per‑game metrics .\n\nData Retrieval: All raw CSVs were downloaded manually via the Kaggle and GitHub web interfaces. No APIs or scraping were required .\nData cleaning & tidying: We loaded NBA player stats and salary data from 2019–2024. We cleaned the data by:\n\nDropping missing values (e.g., in PER, TS%, salary, and position).\nStandardizing column names (e.g., changing Player to player_name).\nSelecting important columns like Season, Player, PER, TS%, Salary, and Position.\nSplitting the data by season for easier processing.\nMerging player stats with their position data, ensuring no missing positions. At each stage, we saved cleaned datasets to CSV files, preparing tidy, analysis-ready data organized by season.\n\nValidation tests: Throughout cleaning we verified:\n\nRow counts via print(df.shape) and sample df.head().\nNo missing values in key fields with df.isnull().sum() == 0.\nReasonable value ranges by inspecting df.describe() for outliers or nonsensical entries.\n\nData enrichment:\n\nCreated a consolidated PER‑TS% table (PER‑TS%.csv) for quick analysis of season‑by‑season efficiency metrics.\nAdded a unified season column in the analysis notebook (Model.ipynb) to tag each record with “2019‑20”, “2020‑21”, etc., enabling cross‑season concatenation.\nDerived correlation subsets (PTS, REB, AST vs. salary) for targeted heatmap generation .\n\nDescriptive statistics:\n\nUsed df.describe() to report mean, median, quartiles, and standard deviations for numeric fields across seasons.\nTabulated average salary by position to highlight pay gaps (e.g. guards vs. centers).\nSummarized PER and TS % distributions to identify shifts in league‑wide efficiency over time .\n\nVisualizations:\n\nBoxplot of Player Efficiency Rating (PER) by Season \nFrom 2019–20 through 2023–24, the PER distribution has grown wider, indicating greater disparity in individual efficiency. This means teams may exploit efficiency outliers—both recruiting high‑end performers and avoiding low‑efficiency contracts.\nDensity Plot of Points per Game (PTS) Over Time \nLeague‑wide scoring has crept upward each season, with 2023–24 showing the highest mean PTS density shift, indicating the modern NBA’s pace‑and‑space style continues to elevate scoring outputs.\nSalary vs. Points per Game (Log Scale) \nThere’s a clear log‑linear salary premium: each additional PPG beyond ~20 yields an outsized pay bump. For high‐scoring “superstars”, they are able to capture exponentially larger contracts.\nCorrelation Heatmap of Performance Metrics vs. Salary \nPTS (r≈0.74) correlates most strongly with salary, followed by AST (r≈0.58) and REB (r≈0.49). It shows that scoring remains the dominant driver of pay, though rebounding and playmaking are also rewarded.\n\nGit Commit History:"
  },
  {
    "objectID": "data_cleaning/data_cleaning.html",
    "href": "data_cleaning/data_cleaning.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndf = pd.read_csv(\"../data/NBA Advanced Stats(2019 - 2024).csv\")\nprint(f\"Loaded NBA Advanced Stats with {df.shape[0]} rows.\")\n\nprint(\"First 5 rows of the NBA Advanced Stats dataset:\")\nprint(df.head())\n\nprint(\"\\nDataset Info\")\nprint(df.info())\n\nprint(\"\\nSummary Statictics\")\nprint(df.describe())\n\nprint(\"\\nMissing values in each column:\")\nprint(df.isnull().sum())\n\nprint(\"\\nColumn names:\")\nprint(df.columns)\n\n\nLoaded NBA Advanced Stats with 4296 rows.\nFirst 5 rows of the NBA Advanced Stats dataset:\n   Unnamed: 0  Season         Player   Age Team Pos     G    GS      MP   PER  \\\n0           0    2019   Bradley Beal  25.0  WAS  SG  82.0  82.0  3028.0  20.8   \n1           1    2019   James Harden  29.0  HOU  PG  78.0  78.0  2867.0  30.6   \n2           2    2019   Kemba Walker  28.0  CHO  PG  82.0  82.0  2863.0  21.7   \n3           3    2019  Tobias Harris  26.0  2TM  PF  82.0  82.0  2847.0  17.2   \n4           4    2019  Tobias Harris  26.0  LAC  PF  55.0  55.0  1903.0  18.2   \n\n   ...  USG%   OWS  DWS    WS  WS/48  OBPM  DBPM   BPM  VORP         Awards  \n0  ...  28.4   5.9  1.7   7.6  0.120   3.8  -0.8   2.9   3.7             AS  \n1  ...  40.5  11.4  3.8  15.2  0.254   9.4   1.6  11.0   9.3  MVP-2,AS,NBA1  \n2  ...  31.5   5.5  1.9   7.4  0.123   5.2  -1.0   4.2   4.4        AS,NBA3  \n3  ...  22.8   4.5  2.6   7.1  0.120   2.1  -0.5   1.6   2.6            NaN  \n4  ...  23.5   3.2  1.8   5.0  0.127   2.7  -0.2   2.4   2.1            NaN  \n\n[5 rows x 30 columns]\n\nDataset Info\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4296 entries, 0 to 4295\nData columns (total 30 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Unnamed: 0  4296 non-null   int64  \n 1   Season      4296 non-null   int64  \n 2   Player      4296 non-null   object \n 3   Age         4290 non-null   float64\n 4   Team        4290 non-null   object \n 5   Pos         4290 non-null   object \n 6   G           4290 non-null   float64\n 7   GS          4290 non-null   float64\n 8   MP          4290 non-null   float64\n 9   PER         4290 non-null   float64\n 10  TS%         4262 non-null   float64\n 11  3PAr        4260 non-null   float64\n 12  FTr         4260 non-null   float64\n 13  ORB%        4296 non-null   float64\n 14  DRB%        4296 non-null   float64\n 15  TRB%        4296 non-null   float64\n 16  AST%        4296 non-null   float64\n 17  STL%        4296 non-null   float64\n 18  BLK%        4296 non-null   float64\n 19  TOV%        4266 non-null   float64\n 20  USG%        4296 non-null   float64\n 21  OWS         4290 non-null   float64\n 22  DWS         4290 non-null   float64\n 23  WS          4290 non-null   float64\n 24  WS/48       4290 non-null   float64\n 25  OBPM        4290 non-null   float64\n 26  DBPM        4290 non-null   float64\n 27  BPM         4290 non-null   float64\n 28  VORP        4290 non-null   float64\n 29  Awards      319 non-null    object \ndtypes: float64(24), int64(2), object(4)\nmemory usage: 1007.0+ KB\nNone\n\nSummary Statictics\n        Unnamed: 0       Season          Age            G           GS  \\\ncount  4296.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean   2147.500000  2021.537942    26.006760    39.828205    18.212587   \nstd    1240.292707     1.699265     4.171169    24.704211    24.255182   \nmin       0.000000  2019.000000    19.000000     1.000000     0.000000   \n25%    1073.750000  2020.000000    23.000000    17.000000     0.000000   \n50%    2147.500000  2022.000000    25.000000    41.000000     5.000000   \n75%    3221.250000  2023.000000    29.000000    62.000000    29.000000   \nmax    4295.000000  2024.000000    43.000000    84.000000    83.000000   \n\n                MP          PER          TS%         3PAr          FTr  ...  \\\ncount  4290.000000  4290.000000  4262.000000  4260.000000  4260.000000  ...   \nmean    896.133100    12.638718     0.540602     0.398038     0.249558  ...   \nstd     766.699467     6.843749     0.114524     0.223305     0.205775  ...   \nmin       1.000000   -45.200000     0.000000     0.000000     0.000000  ...   \n25%     199.000000     9.500000     0.506000     0.260750     0.141000  ...   \n50%     707.500000    12.600000     0.553000     0.408000     0.223000  ...   \n75%    1475.750000    16.100000     0.596000     0.544250     0.316000  ...   \nmax    3028.000000    80.300000     1.500000     1.000000     4.000000  ...   \n\n              TOV%         USG%          OWS          DWS           WS  \\\ncount  4266.000000  4296.000000  4290.000000  4290.000000  4290.000000   \nmean     12.468401    18.234916     0.949301     0.895128     1.846340   \nstd       6.858016     5.869599     1.592891     0.935413     2.342021   \nmin       0.000000     0.000000    -3.000000    -0.500000    -1.900000   \n25%       9.200000    14.400000     0.000000     0.200000     0.100000   \n50%      11.800000    17.600000     0.300000     0.600000     1.000000   \n75%      14.800000    21.400000     1.400000     1.400000     2.800000   \nmax     100.000000    72.500000    12.200000     5.900000    17.000000   \n\n             WS/48         OBPM         DBPM          BPM         VORP  \ncount  4290.000000  4290.000000  4290.000000  4290.000000  4290.000000  \nmean      0.071516    -1.675664    -0.241865    -1.917902     0.423357  \nstd       0.108847     4.057487     2.058934     5.220443     1.075243  \nmin      -1.231000   -52.400000   -31.100000   -81.400000    -2.000000  \n25%       0.035000    -3.300000    -1.100000    -3.700000    -0.100000  \n50%       0.079000    -1.400000    -0.200000    -1.500000     0.000000  \n75%       0.122000     0.300000     0.700000     0.500000     0.600000  \nmax       1.261000    40.100000    32.700000    52.000000    10.600000  \n\n[8 rows x 26 columns]\n\nMissing values in each column:\nUnnamed: 0       0\nSeason           0\nPlayer           0\nAge              6\nTeam             6\nPos              6\nG                6\nGS               6\nMP               6\nPER              6\nTS%             34\n3PAr            36\nFTr             36\nORB%             0\nDRB%             0\nTRB%             0\nAST%             0\nSTL%             0\nBLK%             0\nTOV%            30\nUSG%             0\nOWS              6\nDWS              6\nWS               6\nWS/48            6\nOBPM             6\nDBPM             6\nBPM              6\nVORP             6\nAwards        3977\ndtype: int64\n\nColumn names:\nIndex(['Unnamed: 0', 'Season', 'Player', 'Age', 'Team', 'Pos', 'G', 'GS', 'MP',\n       'PER', 'TS%', '3PAr', 'FTr', 'ORB%', 'DRB%', 'TRB%', 'AST%', 'STL%',\n       'BLK%', 'TOV%', 'USG%', 'OWS', 'DWS', 'WS', 'WS/48', 'OBPM', 'DBPM',\n       'BPM', 'VORP', 'Awards'],\n      dtype='object')\n\n\n\ndf_per_ts = df[['Season','Player','PER','TS%']].dropna()\nsave_path_PER = \"../data/PER-TS%.csv\"\ndf_per_ts.to_csv(save_path_PER,index=False)\nprint(df_per_ts)\n\ndf_salary = pd.read_csv(\"../data/NBA Salaries(2019-2024).csv\")\nprint(df_salary.head())\n\n\n      Season              Player   PER    TS%\n0       2019        Bradley Beal  20.8  0.581\n1       2019        James Harden  30.6  0.616\n2       2019        Kemba Walker  21.7  0.558\n3       2019       Tobias Harris  17.2  0.592\n4       2019       Tobias Harris  18.2  0.605\n...      ...                 ...   ...    ...\n4286    2024     Markquis Nowell  55.5  0.532\n4287    2024         Isaiah Wong  -1.1  0.333\n4289    2024  Izaiah Brockington  26.6  0.400\n4291    2024      Jalen Crutcher -12.6  0.000\n4292    2024   Dmytro Skapintsev -19.3  0.000\n\n[4256 rows x 4 columns]\n   Unnamed: 0         playerName      2019/20   2019/20(*)      2020/21  \\\n0           0      Stephen Curry  $40,231,758  $49,346,703  $43,006,362   \n1           1  Russell Westbrook  $38,506,482  $47,230,546  $41,358,814   \n2           2         Chris Paul  $38,506,482  $47,230,546  $41,358,814   \n3           3       James Harden  $38,199,000  $46,853,401  $41,254,920   \n4           4          John Wall  $38,199,000  $46,853,401  $41,254,920   \n\n    2020/21(*)      2021/22   2021/22(*)      2022/23   2022/23(*)  \\\n0  $52,411,485  $45,780,966  $52,938,707  $48,070,014  $50,968,059   \n1  $50,403,633  $44,211,146  $51,123,449  $47,080,179  $49,918,548   \n2  $50,403,633  $30,800,000  $35,615,504  $28,400,000  $30,112,179   \n3  $50,277,018  $44,310,840  $51,238,730  $33,000,000  $34,989,504   \n4  $50,277,018  $44,310,840  $51,238,730  $47,345,760  $50,200,141   \n\n       2023/24   2023/24(*)  \n0  $51,915,615  $53,458,234  \n1   $3,835,738   $3,949,713  \n2  $30,800,000  $31,715,190  \n3  $35,680,595  $36,740,807  \n4          NaN          NaN  \n\n\n\ndf_2019_20 = df_salary[['playerName','2019/20']].dropna()\ndf_2020_21 = df_salary[['playerName','2020/21']].dropna()\ndf_2021_22 = df_salary[['playerName','2021/22']].dropna()\ndf_2022_23 = df_salary[['playerName','2022/23']].dropna()\ndf_2023_24 = df_salary[['playerName','2023/24']].dropna()\ndf_2019_20.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2020_21.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2021_22.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2022_23.rename(columns={'playerName':'Player_name'}, inplace=True)\ndf_2023_24.rename(columns={'playerName':'Player_name'}, inplace=True)\n\ndf_selectd = df[['Season','Player','Pos']]\ndf_selectd.rename(columns={'Player':'player_name','Season':'season'}, inplace=True)\nsave_path_6 = \"../data/player_pos.csv\"\ndf_selectd.to_csv(save_path_6, index=False)\n\n\nC:\\Users\\27508\\AppData\\Local\\Temp\\ipykernel_38744\\1694157263.py:13: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_selectd.rename(columns={'Player':'player_name','Season':'season'}, inplace=True)\n\n\n\ndf_pos = pd.read_csv(\"../data/player_pos.csv\")\n\nseasons = df_pos[\"season\"].unique()\n\nfor season in seasons:\n    df_season = df_pos[df_pos[\"season\"] == season]\n    file_name = f\"season_{season}.csv\"\n    save_path_7 = f\"../data/{file_name}\"\n    df_season.to_csv(save_path_7, index=False)\n\ndf_pos_2019 = pd.read_csv(\"../data/season_2019.csv\")\ndf_pos_2020 = pd.read_csv(\"../data/season_2020.csv\")\ndf_pos_2021 = pd.read_csv(\"../data/season_2021.csv\")\ndf_pos_2022 = pd.read_csv(\"../data/season_2022.csv\")\n\ndf_merged_data_2019 = pd.read_csv(\"../data/merged_data_19-20.csv\")\ndf_merged_data_2020 = pd.read_csv(\"../data/merged_data_20-21.csv\")\ndf_merged_data_2021 = pd.read_csv(\"../data/merged_data_21-22.csv\")\ndf_merged_data_2022 = pd.read_csv(\"../data/merged_data_22-23.csv\")\n\ndf_merged_data_pos_2019 = pd.merge(df_merged_data_2019, df_pos_2019, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2020 = pd.merge(df_merged_data_2020, df_pos_2020, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2021 = pd.merge(df_merged_data_2021, df_pos_2021, on='player_name', how='left').dropna(subset=['Pos'])\ndf_merged_data_pos_2022 = pd.merge(df_merged_data_2022, df_pos_2022, on='player_name', how='left').dropna(subset=['Pos'])\n\nsave_path_8 = \"../data/merged_data_pos-2019.csv\"\nsave_path_9 = \"../data/merged_data_pos-2020.csv\"\nsave_path_10 = \"../data/merged_data_pos-2021.csv\"\nsave_path_11 = \"../data/merged_data_pos-2022.csv\"\ndf_merged_data_pos_2019.to_csv(save_path_8, index=False)\ndf_merged_data_pos_2020.to_csv(save_path_9, index=False)\ndf_merged_data_pos_2021.to_csv(save_path_10, index=False)\ndf_merged_data_pos_2022.to_csv(save_path_11, index=False)"
  },
  {
    "objectID": "model/Model.html",
    "href": "model/Model.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\n\n\nfile_list=[\"../../data/merged_data_pos-2019.csv\",\"../../data/merged_data_pos-2020.csv\",\n           \"../../data/merged_data_pos-2021.csv\",\"../../data/merged_data_pos-2022.csv\"]\ndf = combined = pd.concat([pd.read_csv(file)for file in file_list],ignore_index=True)\n#df  = pd.read_csv(\"../data/merged_data_pos-2019.csv\")\ndf.head(3)\n\n\n\n\n\n\n\n\nplayer_name\n...1\nteam_abbreviation\nage\nplayer_height\nplayer_weight\ncollege\ncountry\ndraft_year\ndraft_round\n...\ndreb_pct\nusg_pct\nts_pct\nast_pct\nseason.x\nSalary\nseason\nPos\nseason_x\nseason_y\n\n\n\n\n0\nAaron Gordon\n10851\nORL\n24\n203.20\n106.59412\nArizona\nUSA\nNaN\n1\n...\n0.181\n0.205\n0.516\n0.165\n2019-20\n19863636\n2019.0\nPF\nNaN\nNaN\n\n\n1\nAaron Holiday\n10850\nIND\n23\n182.88\n83.91452\nUCLA\nUSA\nNaN\n1\n...\n0.077\n0.182\n0.521\n0.188\n2019-20\n2239200\n2019.0\nPG\nNaN\nNaN\n\n\n2\nAbdel Nader\n10849\nOKC\n26\n195.58\n102.05820\nIowa State\nEgypt\nNaN\n2\n...\n0.095\n0.164\n0.591\n0.068\n2019-20\n1618520\n2019.0\nSF\nNaN\nNaN\n\n\n\n\n3 rows × 27 columns\n\n\n\n\nold_df = df[['player_name','pts','reb','ast','Salary']]\nnew_df = df[['player_name','age','player_weight','player_weight','pts','reb','ast',\n             'net_rating','oreb_pct','dreb_pct','usg_pct','ts_pct','ast_pct','Salary']]\nprint(old_df)\nprint(new_df)\n\n          player_name   pts  reb  ast    Salary\n0        Aaron Gordon  14.4  7.7  3.7  19863636\n1       Aaron Holiday   9.5  2.4  3.4   2239200\n2         Abdel Nader   6.3  1.8  0.7   1618520\n3          Al Horford  11.9  6.8  4.0  28000000\n4     Al-Farouq Aminu   4.3  4.8  1.2   9258000\n...               ...   ...  ...  ...       ...\n1826    Yuta Watanabe   5.6  2.4  0.8   1968175\n1827     Zach Collins  11.6  6.4  2.9   7350000\n1828      Zach LaVine  24.8  4.5  4.2  37096500\n1829       Zeke Nnaji   5.2  2.6  0.3   2617800\n1830  Ziaire Williams   5.7  2.1  0.9   4591680\n\n[1831 rows x 5 columns]\n          player_name  age  player_weight  player_weight   pts  reb  ast  \\\n0        Aaron Gordon   24      106.59412      106.59412  14.4  7.7  3.7   \n1       Aaron Holiday   23       83.91452       83.91452   9.5  2.4  3.4   \n2         Abdel Nader   26      102.05820      102.05820   6.3  1.8  0.7   \n3          Al Horford   34      108.86208      108.86208  11.9  6.8  4.0   \n4     Al-Farouq Aminu   29       99.79024       99.79024   4.3  4.8  1.2   \n...               ...  ...            ...            ...   ...  ...  ...   \n1826    Yuta Watanabe   28       97.52228       97.52228   5.6  2.4  0.8   \n1827     Zach Collins   25      113.39800      113.39800  11.6  6.4  2.9   \n1828      Zach LaVine   28       90.71840       90.71840  24.8  4.5  4.2   \n1829       Zeke Nnaji   22      108.86208      108.86208   5.2  2.6  0.3   \n1830  Ziaire Williams   21       83.91452       83.91452   5.7  2.1  0.9   \n\n      net_rating  oreb_pct  dreb_pct  usg_pct  ts_pct  ast_pct    Salary  \n0           -1.2     0.050     0.181    0.205   0.516    0.165  19863636  \n1            2.2     0.013     0.077    0.182   0.521    0.188   2239200  \n2           -4.2     0.016     0.095    0.164   0.591    0.068   1618520  \n3            3.3     0.051     0.171    0.173   0.536    0.187  28000000  \n4           -5.4     0.053     0.158    0.127   0.395    0.088   9258000  \n...          ...       ...       ...      ...     ...      ...       ...  \n1826        -0.6     0.034     0.117    0.127   0.637    0.071   1968175  \n1827        -7.5     0.076     0.190    0.209   0.599    0.180   7350000  \n1828         0.3     0.016     0.108    0.278   0.607    0.187  37096500  \n1829        -5.9     0.087     0.099    0.149   0.620    0.040   2617800  \n1830        -5.2     0.028     0.105    0.178   0.511    0.086   4591680  \n\n[1831 rows x 14 columns]\n\n\n\nold_df.isnull().sum().sort_values(ascending=False)\nnew_df.isnull().sum().sort_values(ascending=False)\n\nplayer_name      0\nage              0\nplayer_weight    0\nplayer_weight    0\npts              0\nreb              0\nast              0\nnet_rating       0\noreb_pct         0\ndreb_pct         0\nusg_pct          0\nts_pct           0\nast_pct          0\nSalary           0\ndtype: int64\n\n\n\nx_old = old_df.drop(columns=['Salary','player_name'])\ny_old = new_df['Salary']\nx_train_old,x_test_old,y_train_old,y_test_old = train_test_split(x_old,y_old,test_size=0.2,random_state=123)\nx_new = new_df.drop(columns=['Salary',\"player_name\"])\ny_new = new_df['Salary']\nx_train_new, x_test_new, y_train_new, y_test_new = train_test_split(x_new, y_new, test_size=0.2, random_state=123)\n\n\n# models to train\nmodels = {\n    'Linear Regression': LinearRegression(),\n    'KNN Regressor': KNeighborsRegressor(n_neighbors=5),\n    'SVM Regressor': SVR(C=1.0, epsilon=0.2),\n    'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=42)\n}\n\n# the function to train and evaluate models\ndef evaluate_models(X_train, X_test, y_train, y_test, tag=''):\n    results = {}\n    for name, model in models.items():\n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        \n        mae = mean_absolute_error(y_test, y_pred)\n        rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n        r2 = r2_score(y_test, y_pred)\n        \n        results[f'{tag}_{name}'] = {\n            'MAE': mae,\n            'RMSE': rmse,\n            'R2 Score': r2\n        }\n    return results\n\nresults_old = evaluate_models(x_train_old, x_test_old, y_train_old, y_test_old, tag='Three Features')\n\n#combine all results together\nall_results_old = {**results_old}\nresults_df_old = pd.DataFrame(all_results_old).T\nprint(\"\\nComparison of models without feature enrichment:\")\nprint(results_df_old)\n\nresults_new = evaluate_models(x_train_new, x_test_new, y_train_new, y_test_new, tag='All Features')\n\nall_results_new = {**results_new}\nresults_df_new = pd.DataFrame(all_results_new).T\nprint(\"\\nComparison of models with feature enrichment\")\nprint(results_df_new)\n\n\nComparison of models without feature enrichment:\n                                                 MAE          RMSE  R2 Score\nThree Features_Linear Regression        4.959101e+06  6.887345e+06  0.569023\nThree Features_KNN Regressor            4.637137e+06  7.038563e+06  0.549890\nThree Features_SVM Regressor            7.089396e+06  1.169547e+07 -0.242758\nThree Features_Random Forest Regressor  4.100074e+06  6.562109e+06  0.608765\n\nComparison of models with feature enrichment\n                                               MAE          RMSE  R2 Score\nAll Features_Linear Regression        4.660642e+06  6.097851e+06  0.662165\nAll Features_KNN Regressor            4.111459e+06  5.947605e+06  0.678608\nAll Features_SVM Regressor            7.089481e+06  1.169553e+07 -0.242771\nAll Features_Random Forest Regressor  2.652626e+06  4.316311e+06  0.830731\n\n\n\nresults_df_old[\"Model Type\"] = \"Three Features\"\nresults_df_new[\"Model Type\"] = \"All Features\"\n\ncombined_df = pd.concat([results_df_old, results_df_new])\ncombined_df.reset_index(inplace=True)\ncombined_df.rename(columns={\"index\": \"Model\"}, inplace=True)\n\nsns.set(style=\"whitegrid\")\nfig, axes = plt.subplots(3, 1, figsize=(12, 16))\n\n# MAE plot\nsns.barplot(data=combined_df, x=\"MAE\", y=\"Model\", hue=\"Model Type\", ax=axes[0])\naxes[0].set_title(\"MAE Comparison (Lower is Better)\")\n\n# RMSE plot\nsns.barplot(data=combined_df, x=\"RMSE\", y=\"Model\", hue=\"Model Type\", ax=axes[1])\naxes[1].set_title(\"RMSE Comparison (Lower is Better)\")\n\n# R² plot\nsns.barplot(data=combined_df, x=\"R2 Score\", y=\"Model\", hue=\"Model Type\", ax=axes[2])\naxes[2].set_title(\"R² Score Comparison (Higher is Better)\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\ndf_cleaned = df.dropna(axis=1)\ndf_cleaned\n\n\n\n\n\n\n\n\nplayer_name\n...1\nteam_abbreviation\nage\nplayer_height\nplayer_weight\ncountry\ndraft_round\ndraft_number\ngp\n...\nreb\nast\nnet_rating\noreb_pct\ndreb_pct\nusg_pct\nts_pct\nast_pct\nSalary\nPos\n\n\n\n\n0\nAaron Gordon\n10851\nORL\n24\n203.20\n106.59412\nUSA\n1\n4\n62\n...\n7.7\n3.7\n-1.2\n0.050\n0.181\n0.205\n0.516\n0.165\n19863636\nPF\n\n\n1\nAaron Holiday\n10850\nIND\n23\n182.88\n83.91452\nUSA\n1\n23\n66\n...\n2.4\n3.4\n2.2\n0.013\n0.077\n0.182\n0.521\n0.188\n2239200\nPG\n\n\n2\nAbdel Nader\n10849\nOKC\n26\n195.58\n102.05820\nEgypt\n2\n58\n55\n...\n1.8\n0.7\n-4.2\n0.016\n0.095\n0.164\n0.591\n0.068\n1618520\nSF\n\n\n3\nAl Horford\n10846\nPHI\n34\n205.74\n108.86208\nDominican Republic\n1\n3\n67\n...\n6.8\n4.0\n3.3\n0.051\n0.171\n0.173\n0.536\n0.187\n28000000\nC\n\n\n4\nAl-Farouq Aminu\n10853\nORL\n29\n203.20\n99.79024\nUSA\n1\n8\n18\n...\n4.8\n1.2\n-5.4\n0.053\n0.158\n0.127\n0.395\n0.088\n9258000\nPF\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1826\nYuta Watanabe\n12415\nBKN\n28\n203.20\n97.52228\nJapan\nUndrafted\nUndrafted\n58\n...\n2.4\n0.8\n-0.6\n0.034\n0.117\n0.127\n0.637\n0.071\n1968175\nSF\n\n\n1827\nZach Collins\n12414\nSAS\n25\n210.82\n113.39800\nUSA\n1\n10\n63\n...\n6.4\n2.9\n-7.5\n0.076\n0.190\n0.209\n0.599\n0.180\n7350000\nC\n\n\n1828\nZach LaVine\n12413\nCHI\n28\n195.58\n90.71840\nUSA\n1\n13\n77\n...\n4.5\n4.2\n0.3\n0.016\n0.108\n0.278\n0.607\n0.187\n37096500\nSG\n\n\n1829\nZeke Nnaji\n12412\nDEN\n22\n205.74\n108.86208\nUSA\n1\n22\n53\n...\n2.6\n0.3\n-5.9\n0.087\n0.099\n0.149\n0.620\n0.040\n2617800\nPF\n\n\n1830\nZiaire Williams\n12411\nMEM\n21\n205.74\n83.91452\nUSA\n1\n10\n37\n...\n2.1\n0.9\n-5.2\n0.028\n0.105\n0.178\n0.511\n0.086\n4591680\nSF\n\n\n\n\n1831 rows × 21 columns\n\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LassoCV\nimport matplotlib.pyplot as plt\n\n\ndf_cleaned = df_cleaned.drop(df_cleaned.columns[:2].tolist() + ['country', 'draft_round', 'draft_number'], axis=1)\n\n# 只保留数值型特征用于建模\nX = df_cleaned.drop(columns=['Salary']).select_dtypes(include='number')\ny = df_cleaned['Salary']\n\n\n# 标准化处理（PCA 和 Lasso 需要）\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n\n# ========== PCA ==========\npca = PCA(n_components=0.95)\nX_pca = pca.fit_transform(X_scaled)\npca_components = pd.DataFrame(np.abs(pca.components_), columns=X.columns)\npca_importance = pca_components.max().sort_values(ascending=False)\n\n\n# ========== Random Forest ==========\nrf = RandomForestRegressor(random_state=42)\nrf.fit(X, y)\nrf_importance = pd.Series(rf.feature_importances_, index=X.columns).sort_values(ascending=False)\n\n\n# ========== Lasso ==========\nlasso = LassoCV(cv=5, random_state=42)\nlasso.fit(X_scaled, y)\nlasso_importance = pd.Series(np.abs(lasso.coef_), index=X.columns)\nlasso_importance = lasso_importance[lasso_importance &gt; 0].sort_values(ascending=False)\n\n\nplt.figure(figsize=(18, 5))\n\nplt.subplot(1, 3, 1)\npca_importance.head(10).plot(kind='barh')\nplt.title('PCA Feature Influence (Top 10)')\nplt.xlabel('Loading Magnitude')\nplt.gca().invert_yaxis()\n\n\n\n\n\n\n\n\n\nplt.subplot(1, 3, 2)\nrf_importance.head(10).plot(kind='barh')\nplt.title('Random Forest Feature Importance (Top 10)')\nplt.xlabel('Importance')\nplt.gca().invert_yaxis()\n\n\n\n\n\n\n\n\n\nplt.subplot(1, 3, 3)\nlasso_importance.head(10).plot(kind='barh')\nplt.title('Lasso Feature Coefficients (Top 10)')\nplt.xlabel('Coefficient (abs)')\nplt.gca().invert_yaxis()\n\n\n\n\n\n\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ntop_pca_features = pca_importance.head(10).index.tolist()\n\n# Random Forest：取累计重要性达 95% 的特征\ncumulative_importance = rf_importance.cumsum()\nselected_rf_features = cumulative_importance[cumulative_importance &lt;= 0.95].index.tolist()\n\n# Lasso：直接从非零系数中提取出来的特征（你已做好）\nselected_lasso_features = lasso_importance.index.tolist()\n\n\ndef evaluate_rf(feature_list, X, y):\n    X_subset = X[feature_list]\n    X_train, X_test, y_train, y_test = train_test_split(X_subset, y, test_size=0.2, random_state=42)\n\n    model = RandomForestRegressor(random_state=42)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n\n    mse = mean_squared_error(y_test, y_pred)\n    r2 = r2_score(y_test, y_pred)\n    return {'mse': mse, 'r2': r2}\n\n# 避免特征不在 X 里（保险写法）\ntop_pca_features = [f for f in top_pca_features if f in X.columns]\nselected_rf_features = [f for f in selected_rf_features if f in X.columns]\nselected_lasso_features = [f for f in selected_lasso_features if f in X.columns]\n\nresults = {\n    'PCA': evaluate_rf(top_pca_features, X, y),\n    'Random Forest': evaluate_rf(selected_rf_features, X, y),\n    'Lasso': evaluate_rf(selected_lasso_features, X, y)\n}\n\n# 打印结果表格\nimport pandas as pd\nresults_df = pd.DataFrame(results).T\nprint(results_df)\n\n                        mse        r2\nPCA            2.554246e+13  0.724187\nRandom Forest  2.594255e+13  0.719867\nLasso          2.572417e+13  0.722225\n\n\n\n# ========== 可视化对比 ==========\nfig, axes = plt.subplots(1, 2, figsize=(14, 5))\n\n# MSE 图（对数刻度）\naxes[0].bar(results_df.index, results_df['mse'], color='skyblue')\naxes[0].set_title(\"Mean Squared Error (MSE)\")\naxes[0].set_ylabel(\"MSE\")\naxes[0].set_yscale('log')\naxes[0].grid(axis='y', linestyle='--', alpha=0.7)\n\n# R² 图\naxes[1].bar(results_df.index, results_df['r2'], color='lightgreen')\naxes[1].set_title(\"R² Score\")\naxes[1].set_ylabel(\"R²\")\naxes[1].set_ylim(0.7, 0.73)\naxes[1].grid(axis='y', linestyle='--', alpha=0.7)\n\nplt.suptitle(\"Comparison of Feature Selection Methods (Random Forest as Predictor)\", fontsize=14)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "scrape/NBA-API.html",
    "href": "scrape/NBA-API.html",
    "title": "MSDS 597 PROJECT: NBA Data Analysis",
    "section": "",
    "text": "import requests\nimport pandas as pd\n\n\n# Define headers to simulate a browser request (important for NBA API)\nheaders = {\n    'User-Agent': 'Mozilla/5.0',\n    'x-nba-stats-origin': 'stats',\n    'x-nba-stats-token': 'true',\n    'Referer': 'https://www.nba.com/',\n    'Accept-Encoding': 'gzip, deflate, br',\n    'Accept-Language': 'en-US,en;q=0.9'\n}\n\n\n# NBA API endpoint for player stats per game (2023-24 season as example)\nurl = \"https://stats.nba.com/stats/leaguedashplayerstats\"\n\n\n# Set the parameters to fetch per game player stats\nparams = {\n    \"Season\": \"2023-24\",\n    \"SeasonType\": \"Regular Season\",\n    \"MeasureType\": \"Base\",\n    \"PerMode\": \"PerGame\",  # Can be 'Totals' or 'PerGame'\n    \"LeagueID\": \"00\",\n    \"Outcome\": \"\",\n    \"Location\": \"\",\n    \"Month\": \"0\",\n    \"SeasonSegment\": \"\",\n    \"DateFrom\": \"\",\n    \"DateTo\": \"\",\n    \"OpponentTeamID\": \"0\",\n    \"VsConference\": \"\",\n    \"VsDivision\": \"\",\n    \"TeamID\": \"0\",\n    \"Conference\": \"\",\n    \"Division\": \"\",\n    \"GameSegment\": \"\",\n    \"Period\": \"0\",\n    \"ShotClockRange\": \"\",\n    \"LastNGames\": \"0\",\n    \"GameScope\": \"\",\n    \"PlayerExperience\": \"\",\n    \"PlayerPosition\": \"\",\n    \"StarterBench\": \"\",\n    \"TwoWay\": \"0\",\n    \"PORound\": \"0\"\n}\n\n\n# Send GET request to NBA stats API\nresponse = requests.get(url, headers=headers, params=params, timeout=10)\n\n# Raise an error if the request was unsuccessful\nresponse.raise_for_status()\n\n# Parse JSON response\ndata_json = response.json()\n\n# Extract header and row data\nheaders = data_json['resultSets'][0]['headers']\nrows = data_json['resultSets'][0]['rowSet']\n\n# Convert to pandas DataFrame\ndf = pd.DataFrame(rows, columns=headers)\n\n\n# Display top 10 players sorted by PTS (Points per Game)\ndf_sorted = df.sort_values(by='PTS', ascending=False).head(10)\nprint(df_sorted[['PLAYER_NAME', 'TEAM_ABBREVIATION', 'PTS']])"
  }
]